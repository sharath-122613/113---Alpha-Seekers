package com.legalbuddy.utils;

import com.itextpdf.kernel.pdf.PdfDocument;
import com.itextpdf.kernel.pdf.PdfWriter;
import com.itextpdf.kernel.pdf.PdfVersion;
import com.itextpdf.layout.Document;
import com.itextpdf.layout.element.Paragraph;
import com.itextpdf.layout.element.Text;
import com.itextpdf.layout.property.TextAlignment;
import org.apache.pdfbox.pdmodel.PDDocument;
import org.apache.pdfbox.text.PDFTextStripper;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;

public class DocumentUtils {
    private static final Logger logger = LoggerFactory.getLogger(DocumentUtils.class);
    private static final DateTimeFormatter DATE_FORMATTER = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");

    /**
     * Convert text content to PDF with metadata
     * @param content Text content to convert
     * @param metadata Document metadata
     * @return PDF byte array
     */
    public static byte[] createPdfFromText(String content, DocumentMetadata metadata) {
        try (ByteArrayOutputStream baos = new ByteArrayOutputStream()) {
            PdfWriter writer = new PdfWriter(baos);
            PdfDocument pdf = new PdfDocument(writer);
            pdf.setVersion(PdfVersion.PDF_1_7);
            
            Document document = new Document(pdf);
            
            // Add metadata
            document.add(new Paragraph("Document Title: " + metadata.getTitle())
                    .setTextAlignment(TextAlignment.CENTER)
                    .setBold());
            document.add(new Paragraph("Date: " + LocalDateTime.now().format(DATE_FORMATTER))
                    .setTextAlignment(TextAlignment.RIGHT));
            
            // Add content
            document.add(new Paragraph("")
                    .setMarginTop(20));
            document.add(new Paragraph(content));
            
            // Add footer
            document.add(new Paragraph("")
                    .setMarginTop(20));
            document.add(new Paragraph("Generated by Legal Finance Buddy")
                    .setTextAlignment(TextAlignment.RIGHT)
                    .setFontSize(8));
            
            document.close();
            return baos.toByteArray();
        } catch (Exception e) {
            logger.error("Error creating PDF", e);
            throw new RuntimeException("Failed to create PDF: " + e.getMessage(), e);
        }
    }

    /**
     * Extract text from PDF
     * @param pdfBytes PDF byte array
     * @return Extracted text
     */
    public static String extractTextFromPdf(byte[] pdfBytes) {
        try (PDDocument document = PDDocument.load(new ByteArrayInputStream(pdfBytes))) {
            PDFTextStripper stripper = new PDFTextStripper();
            return stripper.getText(document);
        } catch (IOException e) {
            logger.error("Error extracting text from PDF", e);
            throw new RuntimeException("Failed to extract text from PDF: " + e.getMessage(), e);
        }
    }

    /**
     * Validate PDF content
     * @param pdfBytes PDF byte array
     * @return true if valid, false otherwise
     */
    public static boolean validatePdf(byte[] pdfBytes) {
        try {
            PDDocument.load(new ByteArrayInputStream(pdfBytes)).close();
            return true;
        } catch (Exception e) {
            logger.error("Invalid PDF file", e);
            return false;
        }
    }

    /**
     * Create document metadata
     */
    public static class DocumentMetadata {
        private String title;
        private String author;
        private String subject;
        private String keywords;
        private String language;
        private String documentType;
        private String jurisdiction;
        private String clientName;
        private String clientEmail;
        private String clientPhone;

        // Getters and setters
        public String getTitle() { return title; }
        public void setTitle(String title) { this.title = title; }
        public String getAuthor() { return author; }
        public void setAuthor(String author) { this.author = author; }
        public String getSubject() { return subject; }
        public void setSubject(String subject) { this.subject = subject; }
        public String getKeywords() { return keywords; }
        public void setKeywords(String keywords) { this.keywords = keywords; }
        public String getLanguage() { return language; }
        public void setLanguage(String language) { this.language = language; }
        public String getDocumentType() { return documentType; }
        public void setDocumentType(String documentType) { this.documentType = documentType; }
        public String getJurisdiction() { return jurisdiction; }
        public void setJurisdiction(String jurisdiction) { this.jurisdiction = jurisdiction; }
        public String getClientName() { return clientName; }
        public void setClientName(String clientName) { this.clientName = clientName; }
        public String getClientEmail() { return clientEmail; }
        public void setClientEmail(String clientEmail) { this.clientEmail = clientEmail; }
        public String getClientPhone() { return clientPhone; }
        public void setClientPhone(String clientPhone) { this.clientPhone = clientPhone; }
    }
}
